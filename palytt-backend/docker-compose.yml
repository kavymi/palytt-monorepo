services:
  postgres:
    image: postgres:16-alpine
    container_name: palytt-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-palytt}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-palytt_password}
      POSTGRES_DB: ${POSTGRES_DB:-palytt_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-palytt} -d ${POSTGRES_DB:-palytt_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - palytt-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: palytt-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-4000}
      HOST: 0.0.0.0
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000,http://localhost:5173}
      DATABASE_URL: postgresql://${POSTGRES_USER:-palytt}:${POSTGRES_PASSWORD:-palytt_password}@postgres:5432/${POSTGRES_DB:-palytt_db}
    ports:
      - "4000:4000"
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml
    networks:
      - palytt-network

volumes:
  postgres_data:

networks:
  palytt-network:
    driver: bridge
